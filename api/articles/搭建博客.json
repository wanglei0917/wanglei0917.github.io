{"title":"使用Hexo从0到1搭建并部署自己的博客","uid":"195947292051bf18534efeda0536746f","slug":"搭建博客","date":"2022-04-03T11:12:24.000Z","updated":"2022-11-12T13:13:00.166Z","comments":true,"path":"api/articles/搭建博客.json","keywords":null,"cover":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fimg.jj20.com%2Fup%2Fallimg%2F1113%2F021620115230%2F200216115230-9-1200.jpg&refer=http%3A%2F%2Fimg.jj20.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=auto?sec=1652516530&t=4b8a26c49174ba3406859592005f7a24","content":"<h2 id=\"安装-hexo\"><a href=\"#安装-hexo\" class=\"headerlink\" title=\"安装 hexo\"></a>安装 hexo</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-cli -g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h2 id=\"初始化博客\"><a href=\"#初始化博客\" class=\"headerlink\" title=\"初始化博客\"></a>初始化博客</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init <span class=\"token operator\">&lt;</span>your blog name<span class=\"token operator\">></span>\n<span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>your blog name<span class=\"token operator\">></span>\n<span class=\"token function\">npm</span> <span class=\"token function\">install</span>\n<span class=\"token function\">npm</span> run server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n\n<div>\n  <p><em>这里就已经可以看到最基础的效果,开始愉快的写作吧,更多关于hexo的使用技巧可以查看官网</em></p>\n  <a href=\"https://hexo.io/zh-cn/\" target=\"_blank\">Hexo官网</a>\n</div>\n\n<h2 id=\"部署到-github\"><a href=\"#部署到-github\" class=\"headerlink\" title=\"部署到 github\"></a>部署到 github</h2><p>由于没有服务器,我是使用 <code>GitHub Pages</code>来部署的, 也可以使用国内的<code>Gitee Pages</code>或者其他的可以部署静态页面的产品</p>\n<ul>\n<li>首先创建一个与用户名同名的仓库,只有这样,等部署完成的时候才可以使用 xxxxx.github.io 直接访问,由于我这里已经创建过了, 所以报错</li>\n</ul>\n<p><img src=\"../img/2022-04-05-10-12-40-image.png\"></p>\n<ul>\n<li>进入仓库设置,添加 ssh 公钥,具体过程可自行百度,这样做是因为部署的时候可以直接使用私钥将写好的东西推送至仓库</li>\n</ul>\n<p><img src=\"../img/2022-04-05-10-24-42-image.png\"></p>\n<ul>\n<li>安装<a href=\"https://github.com/hexojs/hexo-deployer-git\">hexo-deployer-git</a></li>\n</ul>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<ul>\n<li><p>修改项目根目录下<code>_config.yml</code>文件</p>\n<pre class=\"line-numbers language-yml\" data-language=\"yml\"><code class=\"language-yml\">deploy:\n  type: git\n  repo: https:&#x2F;&#x2F;github.com&#x2F;yourUserName&#x2F;yourUserName.github.io.git\n  branch: main<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><code>repo</code>指定仓库地址,<code>branch</code>指定部署分支,可以添加多个</p>\n\n</div>\n<ul>\n<li>推送</li>\n</ul>\n<p>使用<code>hexo deploy</code>或者<code>npm run deploy</code>即可将生成的静态文件推送至 github 仓库</p>\n<p>至此, 就可以使用 xxxx.github.io 访问到你的博客了</p>\n<h2 id=\"自定义域名\"><a href=\"#自定义域名\" class=\"headerlink\" title=\"自定义域名\"></a>自定义域名</h2><ul>\n<li><p>在阿里云或者腾讯云或者别的可以买域名的地方买一个域名,这里以腾讯云为例</p>\n</li>\n<li><p>添加 DNS 解析</p>\n<p><img src=\"../img/2022-04-05-10-49-18-image.png\"></p>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>这里 CNAME 的记录值设置为你之前的访问地址</p>\n<p>A 记录的记录值可以通过这种方式拿到</p>\n<p><img src=\"../img/2022-04-05-10-55-36-image.png\"></p>\n</p>\n</div>\n</li>\n<li><p>在你的根目录<code>source</code>下添加一个<code>CNAME</code>的文件, 注意这个文件不带后缀,内容写你买的域名即可</p>\n</li>\n<li><p>在<code>github</code>仓库设置中设置自定义域名</p>\n</li>\n</ul>\n<p><img src=\"../img/2022-04-05-10-53-07-image.png\"></p>\n<ul>\n<li>稍等一会,DNS 解析需要一定时间, 一般十分钟, 然后就可以通过你买的域名访问到你的博客啦</li>\n</ul>\n<h2 id=\"使用coding部署\"><a href=\"#使用coding部署\" class=\"headerlink\" title=\"使用coding部署\"></a>使用<a href=\"https://coding.net/\">coding</a>部署</h2><p>因为网络原因 github 有时可能无法访问,所以这是部署的第二套方案</p>\n<ul>\n<li><p>在腾讯云控制台 对象存储中, 创建一个存储桶</p>\n<p><img src=\"../img/2022-04-05-11-06-42-image.png\"></p>\n</li>\n<li><p>进入桶设置打开静态页面开关</p>\n<p><img src=\"../img/2022-04-05-11-09-05-image.png\"></p>\n<p>开启之后就可以访问了,但是是没有任何文件的</p>\n</li>\n<li><p>在控制台搜索访问管理,创建一个访问密钥</p>\n<p><img src=\"../img/2022-04-05-11-12-19-image.png\"></p>\n<p>后续使用<code>coding</code>中的自动构建时, 用密钥就可以将生成的文件上传至存储桶内</p>\n</li>\n<li><p>在 coding 中新建一个项目</p>\n</li>\n<li><p>选择持续集成中的构建计划</p>\n<p><img src=\"../img/2022-04-05-11-02-03-image.png\"></p>\n</li>\n<li><p>自定义你的构建过程</p>\n<p><img src=\"../img/2022-04-05-11-04-19-image.png\"></p>\n<div class=\"custom-quote warning\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 8V13\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12 15.99V16.01\"></path>\n</svg>\n</span>\n<p class=\"custom-quote-title\">注意</p>\n<p>注意: 这里的仓库是你的源代码仓库, 别和你之前在 github 上的仓库搞混了,, 也可以使用同一个,但是这样的话就需要你重新创建一个源代码分支, 因为之前在 guthub 上通过 hexo d 命令推送上去的是生成的文件,使用新分支管路源代码</p>\n\n</div>\n</li>\n<li><p>贴出我自己的过程</p>\n<pre class=\"line-numbers language-js\" data-language=\"js\"><code class=\"language-js\">pipeline <span class=\"token punctuation\">&#123;</span>\n  agent any\n  stages <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'检出'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      steps <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token function\">checkout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n          $<span class=\"token keyword\">class</span><span class=\"token operator\">:</span> <span class=\"token string\">'GitSCM'</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">branches</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>name<span class=\"token operator\">:</span> <span class=\"token constant\">GIT_BUILD_REF</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">userRemoteConfigs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span>\n            <span class=\"token literal-property property\">url</span><span class=\"token operator\">:</span> <span class=\"token constant\">GIT_REPO_URL</span><span class=\"token punctuation\">,</span>\n            <span class=\"token literal-property property\">credentialsId</span><span class=\"token operator\">:</span> <span class=\"token constant\">CREDENTIALS_ID</span>\n          <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'升级Node版本'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      steps <span class=\"token punctuation\">&#123;</span>\n        sh <span class=\"token string\">'rm -rf /usr/lib/node_modules/npm/'</span>\n        <span class=\"token function\">dir</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'/root/.cache/downloads'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          sh <span class=\"token string\">'wget -nc \"https://coding-public-generic.pkg.coding.net/public/downloads/node-linux-x64.tar.xz?version=v16.13.0\" -O node-v16.13.0-linux-x64.tar.xz | true'</span>\n          sh <span class=\"token string\">'tar -xf node-v16.13.0-linux-x64.tar.xz -C /usr --strip-components 1'</span>\n          <span class=\"token comment\">// sh 'wget -nc \"https://coding-public-generic.pkg.coding.net/public/downloads/node-linux-x64.tar.xz?version=v14.18.2\" -O node-v14.18.2-linux-x64.tar.xz | true'</span>\n          <span class=\"token comment\">// sh 'tar -xf node-v14.18.2-linux-x64.tar.xz -C /usr --strip-components 1'</span>\n          <span class=\"token comment\">// 更多版本：v12.22.7、v17.2.0</span>\n        <span class=\"token punctuation\">&#125;</span>\n        sh <span class=\"token string\">'node -v'</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'构建'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      steps <span class=\"token punctuation\">&#123;</span>\n        echo <span class=\"token string\">'开始构建'</span>\n        sh <span class=\"token string\">'npm install -g hexo-cli'</span>\n        sh <span class=\"token string\">'npm install'</span>\n        sh <span class=\"token string\">'npm run build'</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'部署'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      steps <span class=\"token punctuation\">&#123;</span>\n        echo <span class=\"token string\">'开始部署'</span>\n        sh <span class=\"token string\">\"coscmd config -a $&#123;env.COS_SECRET_ID&#125; -s $&#123;env.COS_SECRET_KEY&#125; -b $&#123;env.COS_BUCKET_NAME&#125; -r $&#123;env.COS_BUCKET_REGION&#125;\"</span>\n        sh <span class=\"token string\">'coscmd upload -r public/ /'</span>\n      <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  post <span class=\"token punctuation\">&#123;</span>\n    success <span class=\"token punctuation\">&#123;</span>\n      echo <span class=\"token string\">'\\'部署完成\\''</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p><p>39 40 行就是将生成的 public 文件夹的内容上传至存储桶, 这里的环境变量自行配置</p>\n</p>\n</div>\n</li>\n<li><p>至此, 就可以使用在存储桶中开启的静态页面地址访问到你的博客啦</p>\n</li>\n<li><p>在存储桶设置 -&gt; 域名与传输管理中可自定义域名,但是域名需要备案</p>\n</li>\n</ul>\n<div class=\"custom-quote tip\">\n<span class=\"custom-quote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M20.86 14.13C20 14.7 19.56 15.74 19.77 16.76C20.13 18.55 18.55 20.13 16.76 19.77C15.74 19.57 14.7 20 14.13 20.86C13.12 22.38 10.89 22.38 9.88 20.86C9.3 20 8.26 19.56 7.24 19.77C5.45 20.13 3.87 18.55 4.23 16.76C4.43 15.74 4 14.7 3.14 14.13C1.62 13.12 1.62 10.89 3.14 9.88C4 9.3 4.44 8.26 4.23 7.24C3.87 5.45 5.45 3.87 7.24 4.23C8.26 4.44 9.3 4 9.87 3.14C10.88 1.62 13.11 1.62 14.12 3.14C14.7 4 15.74 4.44 16.76 4.23C18.55 3.87 20.13 5.45 19.77 7.24C19.56 8.26 20 9.3 20.86 9.87C22.38 10.88 22.38 13.12 20.86 14.13Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M12.01 15C12.01 14.5 12.01 14.5 12.01 14.5C12.04 13.75 13 13.46 14.04 12.2C14.41 11.74 14.69 11.41 14.86 10.85C15.15 9.95 14.92 9.18 14.86 9.02C14.8 8.79 14.52 8 13.72 7.46C13.06 7.02 12.42 7 12.14 7C11.9 7 11.36 7 10.78 7.3C10.28 7.56 9.98 7.9 9.83 8.1C9.24 8.82 9.06 9.63 9 10.06\"></path>\n<path stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M11.99 18H12.01\"></path>\n</svg></span>\n<p class=\"custom-quote-title\">提示</p>\n<p>使用<code>coding</code>部署的话,源代码提交即可自动构建,使用<code>github pages</code>的话,需要每次写完<code>hexo d</code>手动构建一下,如何省去这一步呢?</p>\n<ul>\n<li><p>首先在<code>coding</code>新建一个自定义构建过程</p>\n</li>\n<li><p>编写 JenkinsFile 文件, 因为<code>hexo d</code>命令实际上就是先<code>build</code>,然后再<code>push</code>到你的存储库, 我们可以拿到之前使用<code>ssh</code>生成的私钥文件,放在源代码里,或者通过 shell 写入到构建过程中的根目录中,再配置 git 提交时的用户名及邮箱</p>\n</li>\n<li><p>然后就可以在每次提交源代码的时候自动构建并推送至 github 与 coding</p>\n</li>\n</ul>\n\n</div>\n<p>如有错误请指出</p>\n","feature":true,"text":"安装 hexonpm install hexo-cli -g 初始化博客hexo init &lt;your blog name> cd &lt;your blog name> npm install npm run server 这里就已经可以看到最基础的效果,开始愉快的写作吧...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"Blog","slug":"Blog","count":1,"path":"api/tags/Blog.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%89%E8%A3%85-hexo\"><span class=\"toc-text\">安装 hexo</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%9D%E5%A7%8B%E5%8C%96%E5%8D%9A%E5%AE%A2\"><span class=\"toc-text\">初始化博客</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%83%A8%E7%BD%B2%E5%88%B0-github\"><span class=\"toc-text\">部署到 github</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D\"><span class=\"toc-text\">自定义域名</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8coding%E9%83%A8%E7%BD%B2\"><span class=\"toc-text\">使用coding部署</span></a></li></ol>","author":{"name":"王磊磊","slug":"blog-author","avatar":"https://static.xiongmaoyaoyao.com/INVOICE_LICENSE/2022/04/02/16488841216097075.jpg","link":"/","description":"有志青年","socials":{"github":"https://github.com/wanglei0917","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2964740306392392","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/189716101"}}}},"mapped":true,"prev_post":{"title":"HandsonTable","uid":"647ebdc553edc1b455b5763958a586e8","slug":"HandsonTable","date":"2022-05-13T02:53:15.000Z","updated":"2022-11-12T13:13:00.166Z","comments":true,"path":"api/articles/HandsonTable.json","keywords":null,"cover":"https://www4.bing.com//th?id=OHR.TofinoOcean_ZH-CN6555392161_1920x1080.jpg&rf=LaDigue_1920x1080.jpg&pid=hp","text":" 😋😋😋😋😋😋😋😋😋😋😋😋😋😋😋 😋😋😋😋😋😋😋😋😋😋😋😋😋😋😋 😋😋😋😋😋😋😋😋😋😋😋😋😋😋😋 😋😋😋😋😋😋😋😋😋😋😋😋😋😋😋 😋😋😋😋😋😋😋😋😋😋😋😋😋😋😋 😋😋😋😋😋😋😋😋😋😋😋😋😋😋😋 😋😋😋😋😋😋😋😋😋😋😋😋😋😋😋 😋😋😋😋😋😋😋😋😋😋😋😋😋😋😋 😋😋😋😋😋😋😋😋😋😋😋...","link":"","photos":[],"count_time":{"symbolsCount":560,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"HandsonTable","slug":"HandsonTable","count":2,"path":"api/tags/HandsonTable.json"}],"author":{"name":"王磊磊","slug":"blog-author","avatar":"https://static.xiongmaoyaoyao.com/INVOICE_LICENSE/2022/04/02/16488841216097075.jpg","link":"/","description":"有志青年","socials":{"github":"https://github.com/wanglei0917","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2964740306392392","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/189716101"}}}},"feature":true},"next_post":{"title":"常见面试题汇总","uid":"f7d77bfe1e6b724bbb02972e6eb815ab","slug":"常见面试题汇总","date":"2022-01-15T02:27:39.000Z","updated":"2022-11-12T13:13:00.166Z","comments":true,"path":"api/articles/常见面试题汇总.json","keywords":null,"cover":"https://h2.ioliu.cn/bing/BulgariaPerseids_EN-AU11585904087_1920x1080.jpg?imageslim","text":"HTML什么是盒子模型？ 在网页中，一个元素占有空间的大小由几个部分构成，其中包括元素的内容(content)，元素的内边距(padding)，元素的边框(border)，元素的外边距(margin)四个部分。这四个部分占有的空间中，有的部分可以显示相应的内容，而有的部分只用来分...","link":"","photos":[],"count_time":{"symbolsCount":"17k","symbolsTime":"15 mins."},"categories":[],"tags":[{"name":"面试","slug":"面试","count":1,"path":"api/tags/面试.json"}],"author":{"name":"王磊磊","slug":"blog-author","avatar":"https://static.xiongmaoyaoyao.com/INVOICE_LICENSE/2022/04/02/16488841216097075.jpg","link":"/","description":"有志青年","socials":{"github":"https://github.com/wanglei0917","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"https://juejin.cn/user/2964740306392392","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/189716101"}}}},"feature":true}}